[Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 128, 0), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 2), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 5), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 7), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 8), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 318, 9), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 12), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 13), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 15), Instruction(0x7c, PUSH, 29, 0, 1, 3, Place 29-byte item on stack., 26959946667150639794667015087019630673637144422540572481103610249216, 16), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 46), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 47), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 4294967295, 48), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 53), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 54), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 100597159, 55), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 60), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 374, 61), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 64), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 65), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 117300739, 66), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 71), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 429, 72), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 75), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 76), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 157198259, 77), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 82), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 573, 83), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 86), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 87), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 404098525, 88), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 93), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 674, 94), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 97), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 98), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 599290589, 99), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 104), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 717, 105), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 108), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 109), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 826074471, 110), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 115), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 850, 116), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 119), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 120), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 1117154408, 121), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 126), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 899, 127), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 130), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 131), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 1265959732, 132), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 137), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 968, 138), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 141), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 142), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 1322315729, 143), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 148), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1011, 149), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 152), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 153), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 1889567281, 154), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 159), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1021, 160), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 163), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 164), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 2043039848, 165), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 170), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1108, 171), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 174), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 175), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 2043438992, 176), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 181), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1185, 182), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 185), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 186), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 2250260747, 187), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 192), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1286, 193), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 196), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 197), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 2376452955, 198), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 203), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1329, 204), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 207), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 208), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 2385540006, 209), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 214), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1416, 215), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 218), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 219), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 2514000705, 220), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 225), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1448, 226), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 229), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 230), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 2800922170, 231), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 236), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1592, 237), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 240), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 241), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 2835717307, 242), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 247), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1602, 248), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 251), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 252), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 3021264054, 253), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 258), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1679, 259), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 262), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 263), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 3404319313, 264), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 269), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1770, 270), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 273), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 274), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 3714247998, 275), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 280), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1941, 281), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 284), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 285), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 3833895730, 286), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 291), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2060, 292), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 295), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 296), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 3877917340, 297), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 302), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2105, 303), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 306), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 307), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 4076725131, 308), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 313), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2184, 314), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 317), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 318), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 319), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 8, 321), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 323), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 324), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 325), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 326), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 327), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 371, 328), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 331), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 333), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 334), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 335), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 336), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 337), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 340), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 341), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 342), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 343), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 364), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 365), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 366), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2251, 367), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 370), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 371), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 372), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 373), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 374), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 375), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 376), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 377), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 386, 378), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 381), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 382), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 384), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 385), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 386), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 387), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 427, 388), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 391), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 393), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 394), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 395), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 396), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 397), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 398), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 399), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 400), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 401), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 402), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 403), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 405), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 406), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 407), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 408), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 409), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 410), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 411), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 412), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 413), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 415), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 416), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 417), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 418), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 419), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 420), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 421), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 422), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2948, 423), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 426), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 427), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 428), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 429), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 430), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 431), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 432), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 441, 433), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 436), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 437), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 439), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 440), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 441), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 442), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 450, 443), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3057, 446), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 449), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 450), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 451), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 453), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 454), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 455), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 456), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 458), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 459), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 460), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 461), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 462), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 463), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 464), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 465), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 466), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 467), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 468), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 469), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 470), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 472), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 473), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 474), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 475), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 476), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 477), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 478), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 480), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 481), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 482), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 483), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 484), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 485), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 487), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 488), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 489), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 490), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 491), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 514, 492), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 495), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 496), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 497), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 498), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 499), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 500), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 501), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 502), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 503), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 504), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 506), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 507), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 508), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 509), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 487, 510), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 513), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 514), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 515), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 516), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 517), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 518), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 519), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 520), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 521), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 522), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 523), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 524), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 525), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 527), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 528), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 529), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 559, 530), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 533), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 534), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 535), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 536), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 537), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 538), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 539), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 541), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 542), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 544), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 545), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 548), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 549), Instruction(0x19, NOT, 0, 1, 1, 3, Bitwise NOT operation., None, 550), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 551), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 552), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 553), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 554), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 556), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 557), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 558), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 559), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 560), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 561), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 562), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 563), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 564), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 565), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 567), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 568), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 569), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 570), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 571), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 572), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 573), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 574), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 575), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 576), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 585, 577), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 580), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 581), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 583), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 584), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 585), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 586), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 648, 587), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 590), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 592), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 593), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 594), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 595), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 596), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 597), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 598), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 599), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 600), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 601), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 622), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 623), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 624), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 626), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 627), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 628), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 629), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 630), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 631), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 632), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 633), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 634), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 636), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 637), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 638), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 639), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 640), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 641), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 642), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 643), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3215, 644), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 647), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 648), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 649), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 651), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 652), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 653), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 654), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 655), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 656), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 657), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 658), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 659), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 660), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 662), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 663), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 664), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 665), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 666), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 668), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 669), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 670), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 671), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 672), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 673), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 674), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 675), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 676), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 677), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 686, 678), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 681), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 682), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 684), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 685), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 686), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 687), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 695, 688), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3356, 691), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 694), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 695), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 696), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 698), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 699), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 700), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 701), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 702), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 703), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 705), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 706), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 707), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 708), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 709), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 711), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 712), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 713), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 714), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 715), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 716), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 717), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 718), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 719), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 720), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 729, 721), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 724), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 725), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 727), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 728), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 729), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 730), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 824, 731), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 734), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 736), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 737), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 738), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 739), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 740), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 741), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 742), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 743), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 744), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 745), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 766), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 767), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 768), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 770), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 771), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 772), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 773), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 774), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 775), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 776), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 777), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 798), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 799), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 800), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 802), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 803), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 804), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 805), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 806), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 807), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 808), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 809), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 810), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 812), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 813), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 814), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 815), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 816), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 817), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 818), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 819), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3362, 820), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 823), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 824), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 825), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 827), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 828), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 829), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 830), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 831), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 832), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 833), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 834), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 835), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 836), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 838), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 839), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 840), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 841), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 842), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 844), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 845), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 846), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 847), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 848), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 849), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 850), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 851), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 852), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 853), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 862, 854), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 857), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 858), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 860), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 861), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 862), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 863), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 871, 864), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3663, 867), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 870), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 871), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 872), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 874), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 875), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 876), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 255, 877), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 879), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 255, 880), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 882), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 883), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 884), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 885), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 887), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 888), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 889), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 890), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 891), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 893), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 894), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 895), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 896), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 897), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 898), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 899), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 900), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 901), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 902), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 911, 903), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 906), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 907), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 909), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 910), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 911), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 912), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 942, 913), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 916), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 918), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 919), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 920), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 921), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 922), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 923), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 924), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 925), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 926), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 927), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 928), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 930), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 931), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 932), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 933), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 934), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 935), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 936), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 937), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3682, 938), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 941), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 942), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 943), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 945), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 946), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 947), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 948), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 949), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 950), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 951), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 952), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 953), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 954), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 956), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 957), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 958), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 959), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 960), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 962), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 963), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 964), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 965), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 966), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 967), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 968), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 969), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 970), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 971), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 980, 972), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 975), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 976), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 978), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 979), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 980), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 981), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 989, 982), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3942, 985), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 988), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 989), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 990), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 992), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 993), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 994), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 995), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 996), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 997), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 999), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1000), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1001), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1002), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1003), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1005), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1006), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1007), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1008), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1009), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 1010), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1011), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1019, 1012), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3948, 1015), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1018), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1019), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 1020), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1021), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1022), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1023), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1024), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1033, 1025), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1028), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1029), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1031), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1032), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1033), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1034), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1086, 1035), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 1038), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1040), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 1041), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1042), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1043), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1044), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1045), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1046), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1047), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1048), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 1049), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1070), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1071), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1072), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1074), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1075), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1076), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1077), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1078), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1079), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1080), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1081), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 4006, 1082), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1085), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1086), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1087), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1089), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1090), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1091), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1092), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1093), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1094), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1096), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1097), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1098), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1099), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1100), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1102), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1103), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1104), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1105), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1106), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 1107), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1108), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1109), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1110), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1111), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1120, 1112), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1115), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1116), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1118), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1119), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1120), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1121), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1183, 1122), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 1125), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1127), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 1128), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1129), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1130), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1131), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1132), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1133), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1134), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1135), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 1136), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1157), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1158), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1159), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1161), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1162), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1163), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1164), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1165), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1166), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1167), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1168), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1169), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1171), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1172), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1173), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1174), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1175), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1176), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1177), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1178), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 4030, 1179), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1182), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1183), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 1184), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1185), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1186), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1187), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1188), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1197, 1189), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1192), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1193), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1195), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1196), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1197), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1198), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1260, 1199), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 1202), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1204), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 1205), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1206), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1207), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1208), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1209), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1210), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1211), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1212), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 1213), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1234), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1235), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1236), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1238), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1239), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1240), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1241), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1242), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1243), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1244), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1245), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1246), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1248), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1249), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1250), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1251), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1252), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1253), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1254), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1255), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 4399, 1256), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1259), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1260), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1261), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1263), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1264), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1265), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1266), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1267), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1268), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1269), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1270), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1271), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1272), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1274), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1275), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1276), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1277), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1278), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1280), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1281), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1282), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1283), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1284), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 1285), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1286), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1287), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1288), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1289), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1298, 1290), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1293), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1294), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1296), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1297), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1298), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1299), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1307, 1300), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 4937, 1303), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1306), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1307), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1308), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1310), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1311), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1312), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1313), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1314), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1315), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1317), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1318), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1319), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1320), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1321), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1323), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1324), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1325), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1326), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1327), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 1328), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1329), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1330), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1331), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1332), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1341, 1333), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1336), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1337), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1339), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1340), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1341), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1342), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1350, 1343), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 4943, 1346), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1349), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1350), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1351), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1353), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1354), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1355), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 1356), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1377), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 1378), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1399), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1400), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1401), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1402), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1404), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1405), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1406), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1407), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1408), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1410), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1411), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1412), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1413), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1414), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 1415), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1416), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1446, 1417), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 1420), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1422), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 1423), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1424), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1425), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1426), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1427), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1428), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1429), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1430), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1431), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1432), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1434), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1435), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1436), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1437), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1438), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1439), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1440), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1441), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 4980, 1442), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1445), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1446), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 1447), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1448), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1449), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1450), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1451), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1460, 1452), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1455), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1456), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1458), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1459), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1460), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1461), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1469, 1462), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5087, 1465), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1468), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1469), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1470), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1472), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1473), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1474), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1475), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1477), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1478), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1479), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1480), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1481), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1482), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 1483), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1484), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1485), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1486), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1487), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1488), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1489), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1491), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1492), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1493), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1494), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1495), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1496), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1497), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1499), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1500), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1501), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 1502), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 1503), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1504), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1506), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 1507), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1508), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 1509), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1510), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1533, 1511), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1514), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1515), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1516), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1517), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1518), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1519), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 1520), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1521), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1522), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1523), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1525), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1526), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1527), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1528), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1506, 1529), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1532), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1533), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1534), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1535), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1536), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1537), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1538), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1539), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1540), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1541), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1542), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1543), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 1544), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1546), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1547), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1548), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1578, 1549), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1552), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1553), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1554), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1555), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1556), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1557), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 1558), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 1560), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1561), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1563), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 1564), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 1567), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1568), Instruction(0x19, NOT, 0, 1, 1, 3, Bitwise NOT operation., None, 1569), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1570), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1571), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1572), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1573), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1575), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1576), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1577), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1578), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1579), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1580), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1581), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1582), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1583), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1584), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1586), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1587), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1588), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1589), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1590), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 1591), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1592), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1600, 1593), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5245, 1596), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1599), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1600), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 1601), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1602), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1603), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1604), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1605), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1614, 1606), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1609), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1610), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1612), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1613), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1614), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1615), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1677, 1616), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 1619), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1621), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 1622), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1623), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1624), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1625), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1626), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1627), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1628), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1629), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 1630), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1651), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1652), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1653), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1655), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1656), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1657), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1658), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1659), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1660), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1661), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1662), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1663), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1665), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1666), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1667), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1668), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1669), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1670), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1671), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1672), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5310, 1673), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1676), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1677), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 1678), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1679), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1680), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1681), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1682), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1691, 1683), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1686), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1687), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1689), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1690), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1691), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1692), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1744, 1693), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 1696), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1698), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 1699), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1700), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1701), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1702), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1703), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1704), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1705), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1706), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 1707), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1728), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1729), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1730), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1732), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1733), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1734), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1735), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1736), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1737), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1738), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1739), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5325, 1740), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1743), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1744), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1745), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1747), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1748), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1749), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1750), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1751), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1752), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1753), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1754), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1755), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1756), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1758), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1759), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1760), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1761), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1762), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1764), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1765), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1766), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1767), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1768), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 1769), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1770), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1771), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1772), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1773), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1782, 1774), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1777), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1778), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1780), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1781), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1782), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1783), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1915, 1784), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 1787), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1789), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 1790), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1791), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1792), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1793), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1794), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1795), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1796), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1797), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 1798), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1819), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1820), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1821), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1823), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1824), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1825), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1826), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1827), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1828), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1829), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1830), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1831), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1833), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1834), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1835), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1836), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1837), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1838), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1839), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1840), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1841), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1843), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1844), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1845), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1846), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1847), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1848), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1849), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1850), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1852), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1853), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1854), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1855), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 1856), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1858), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1859), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1861), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1862), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 1863), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 1864), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1865), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1867), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1868), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1870), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1871), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1872), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1873), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1874), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1876), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1877), Instruction(0x93, SWAP, 0, 5, 5, 3, Exchange 1st and 5th stack items., None, 1878), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1879), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1880), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1881), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1882), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1883), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1884), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1885), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1887), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 1888), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 1889), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1890), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1891), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 1892), Instruction(0x37, CALLDATACOPY, 0, 3, 0, 3, Copy input data in current environment to memory., None, 1893), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1894), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1895), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1896), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1897), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1898), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1899), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1900), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1901), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1902), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1903), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1904), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1905), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1906), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1907), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1908), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1909), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1910), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5357, 1911), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 1914), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1915), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1916), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1918), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1919), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 1920), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1921), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1922), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1923), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1924), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1925), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 1926), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1927), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1929), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1930), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1931), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1932), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 1933), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 1935), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1936), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1937), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1938), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1939), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 1940), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1941), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 1942), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1943), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 1944), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 1953, 1945), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 1948), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 1949), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1951), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 1952), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 1953), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 1954), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2038, 1955), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 1958), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1960), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 1961), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 1962), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 1963), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1964), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1965), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1966), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1967), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 1968), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 1969), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 1990), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1991), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 1992), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 1994), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1995), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 1996), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 1997), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 1998), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 1999), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 2000), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2001), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2022), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2023), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2024), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2026), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2027), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 2028), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 2029), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2030), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2031), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2032), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2033), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5744, 2034), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 2037), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2038), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 2039), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 2041), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2042), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 2043), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2044), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2045), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2046), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2048), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 2049), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2050), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2051), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 2052), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 2054), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2055), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 2056), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 2057), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2058), Instruction(0xf3, RETURN, 0, 2, 0, 0, Halt execution returning output data., None, 2059), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2060), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 2061), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2062), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2063), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2072, 2064), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 2067), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2068), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2070), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 2071), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2072), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2073), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2103, 2074), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 2077), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2079), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 2080), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 2081), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2082), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2083), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2084), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2085), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2086), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 2087), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2088), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2089), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2091), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2092), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 2093), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 2094), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2095), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2096), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2097), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2098), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5781, 2099), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 2102), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2103), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 2104), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2105), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 2106), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2107), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2108), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2117, 2109), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 2112), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2113), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2115), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 2116), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2117), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2118), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2182, 2119), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 2122), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2124), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 2125), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 2126), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2127), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2128), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2129), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2130), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2131), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 2132), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2133), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2154), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2155), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2156), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2158), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2159), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 2160), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 2161), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2162), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2163), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 2164), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2165), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2166), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2167), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2168), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2170), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2171), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 2172), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 2173), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2174), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2175), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2176), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2177), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5945, 2178), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 2181), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2182), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 2183), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2184), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 2185), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2186), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2187), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2196, 2188), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 2191), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2192), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2194), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 2195), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2196), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2197), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2249, 2198), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 2201), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2203), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 2204), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 2205), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2206), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2207), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2208), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2209), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2210), Instruction(0x35, CALLDATALOAD, 0, 1, 1, 3, Get input data of current environment., None, 2211), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2212), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2233), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2234), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2235), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2237), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2238), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 2239), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 2240), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2241), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2242), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2243), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2244), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 6238, 2245), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 2248), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2249), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 2250), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2251), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2252), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 2254), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2255), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2276), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 2277), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2278), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2279), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2280), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2289, 2281), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 2284), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2285), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2287), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 2288), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2289), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2290), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 2291), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2293), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 2295), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2296), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2317), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2318), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2339), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2340), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2341), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2342), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2344), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2345), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2346), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2347), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2348), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2350), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2351), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 2353), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 2354), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 2355), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2356), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2357), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2358), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2367, 2359), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 2362), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2363), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2365), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 2366), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2367), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 2368), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2370), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 2372), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2373), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2394), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2395), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2416), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2417), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2418), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2419), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2421), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2422), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2423), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2424), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2425), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2427), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2428), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 2430), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 2431), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2432), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 2433), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2435), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 2437), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2438), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2459), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2460), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2481), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2482), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2483), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2484), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2486), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2487), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2488), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2489), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2490), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2492), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2493), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 2495), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 2496), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2497), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 2498), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2499), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2500), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2501), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2510, 2502), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 2505), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2506), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2508), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 2509), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2510), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 9, 2511), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2513), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 2515), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2516), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2537), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2538), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2559), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2560), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2561), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2562), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2564), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2565), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2566), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2567), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2568), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2570), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2571), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 2573), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2574), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2576), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 2577), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2578), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 2579), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 2582), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2583), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 2584), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 255, 2585), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2587), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2588), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2589), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2590), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2599, 2591), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 2594), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2595), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2597), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 2598), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2599), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 9, 2600), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2602), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 2604), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2605), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2626), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2627), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2648), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2649), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2650), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2651), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2653), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2654), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2655), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2656), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2657), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2659), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2660), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 2662), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2663), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2665), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 2666), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2667), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 2668), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 2671), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2672), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 2673), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 255, 2674), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2676), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2677), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2678), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 2679), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2688, 2680), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 2683), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2684), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2686), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 2687), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2688), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2689), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 2690), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2692), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 2694), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2695), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2716), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2717), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2738), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2739), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2740), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2741), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2743), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2744), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2745), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2746), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2747), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2749), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2750), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 2752), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2753), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 2755), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 2756), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 2757), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 2758), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 2759), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2760), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2761), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2762), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2763), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 2764), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2765), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2766), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 2767), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2769), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 2771), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2772), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2793), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2794), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2815), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2816), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2817), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2818), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2820), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2821), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2822), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2823), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2824), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2826), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2827), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 2829), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2830), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 2832), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 2833), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 2834), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2835), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 2836), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2837), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2838), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2839), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2840), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 2841), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2842), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2843), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2844), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2865), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 2866), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2867), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2888), Instruction(0x7f, PUSH, 32, 0, 1, 3, Place 32-byte (full word) item on stack., 100389287136786176327247604509743168900146139575972864366142685224231313322991, 2889), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 2922), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 2923), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 2925), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2926), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 2927), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 2928), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 2929), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 2930), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 2932), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 2933), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2934), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2935), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 2936), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 2938), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2939), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 2940), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 2941), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2942), Instruction(0xa3, LOG, 0, 5, 0, 1500, Append log record with three topics., None, 2943), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2944), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2945), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 2946), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 2947), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 2948), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 2949), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 2951), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2952), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 2953), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2954), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 2955), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 2958), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 2959), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 2960), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2961), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 2982), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 2983), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3004), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 3005), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3006), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3027), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 3028), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3029), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3030), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3039, 3031), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 3034), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3035), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3037), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 3038), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3039), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3040), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 7, 3041), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3043), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3044), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 3045), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3046), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3047), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 8, 3048), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3050), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3051), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 3052), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3053), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3054), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3055), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3056), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3057), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 3058), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3060), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3061), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 3062), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3064), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 3065), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3067), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3068), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 3069), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 3072), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 3073), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3074), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 2, 3075), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3077), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 3078), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3079), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 3080), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3082), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3083), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3085), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3086), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 3087), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 3088), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3089), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3091), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 3092), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 3094), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3095), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3096), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3097), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 3098), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3100), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3101), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 3102), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3103), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3104), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3105), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3106), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3107), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3108), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3110), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3111), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3112), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3113), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 3114), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3116), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 3117), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3119), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3120), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 3121), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 3124), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 3125), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3126), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 2, 3127), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3129), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 3130), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3131), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3132), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3207, 3133), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 3136), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3137), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 3138), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 3140), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3164, 3141), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 3144), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 3145), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3148), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 3149), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3150), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 3151), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 3152), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 3153), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3154), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3155), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3156), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3158), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3159), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3207, 3160), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3163), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3164), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3165), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3166), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3167), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3168), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3169), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3171), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3172), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3174), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 3176), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3177), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3178), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3179), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3180), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3181), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3182), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3183), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 3184), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3186), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3187), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3188), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3190), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3191), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 3192), Instruction(0x11, GT, 0, 2, 1, 3, Greater-than comparision., None, 3193), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3178, 3194), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 3197), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3198), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3199), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 3200), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 3201), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3203), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3204), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3205), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3206), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3207), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3208), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3209), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3210), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3211), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3212), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3213), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3214), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3215), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3216), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3218), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 6, 3219), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3221), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 3223), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3224), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3245), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3246), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3267), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3268), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3269), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3270), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3272), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3273), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3274), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3275), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3276), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3278), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3279), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 3281), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3282), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 3284), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3285), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3306), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3307), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3328), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3329), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3330), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3331), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3333), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3334), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3335), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3336), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3337), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3339), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3340), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 3342), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3343), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3344), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 3345), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3346), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 3347), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3349), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3350), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 3351), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3352), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3353), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3354), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3355), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3356), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 3357), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3359), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3360), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3361), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3362), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3363), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 6, 3365), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3367), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 3369), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3370), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3391), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3392), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3413), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3414), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3415), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3416), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3418), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3419), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3420), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3421), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3422), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3424), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3425), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 3427), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3428), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 3430), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3431), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3452), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3453), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3474), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3475), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3476), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3477), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3479), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3480), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3481), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3482), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3483), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3485), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3486), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 3488), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3489), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3490), Instruction(0x11, GT, 0, 2, 1, 3, Greater-than comparision., None, 3491), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3492), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3493), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3494), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3503, 3495), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 3498), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3499), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3501), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 3502), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3503), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3504), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 6, 3505), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3507), Instruction(0x86, DUP, 0, 7, 8, 3, Duplicate 7th stack item., None, 3509), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3510), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3531), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3532), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3553), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3554), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3555), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3556), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3558), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3559), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3560), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3561), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3562), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3564), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3565), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 3567), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3568), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 3570), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3571), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3592), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3593), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3614), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3615), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3616), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3617), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3619), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3620), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3621), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3622), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3623), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3625), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3626), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 3628), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3629), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3631), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3632), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3633), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 3634), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 3635), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3636), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3637), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3638), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3639), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 3640), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3641), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3652, 3642), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 3645), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 3646), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 3647), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2251, 3648), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3651), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3652), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 3653), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3655), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3656), Instruction(0x93, SWAP, 0, 5, 5, 3, Exchange 1st and 5th stack items., None, 3657), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 3658), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3659), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3660), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3661), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3662), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3663), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 3, 3664), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3666), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3668), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3669), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3670), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 3671), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 3674), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3675), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 3676), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 255, 3677), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3679), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3680), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3681), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3682), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3683), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3685), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 3686), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3688), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 3690), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3691), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3712), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3713), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3734), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3735), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3736), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3737), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3739), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3740), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3741), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3742), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3743), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3745), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3746), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 3748), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3749), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 3750), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3751), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3752), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 3753), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3762, 3754), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 3757), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3758), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3760), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 3761), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3762), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3763), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 3764), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3766), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 3768), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3769), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3790), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3791), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3812), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3813), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3814), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3815), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3817), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3818), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3819), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3820), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3821), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3823), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3824), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 3826), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3827), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3829), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3830), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3831), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 3832), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 3833), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3834), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3835), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3836), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3837), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 3838), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3839), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3840), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 3841), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3843), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3845), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3846), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3847), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 3848), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 3849), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3850), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3851), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3852), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3853), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 3854), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3855), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 3856), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3857), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3878), Instruction(0x7f, PUSH, 32, 0, 1, 3, Place 32-byte (full word) item on stack., 92312388597506580910220011357950614650372135269746937547546302273167149333669, 3879), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 3912), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 3913), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 3915), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3916), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 3917), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3918), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 3919), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 3920), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 3922), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3923), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3924), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3925), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 3926), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 3928), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3929), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3930), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 3931), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3932), Instruction(0xa2, LOG, 0, 4, 0, 1125, Append log record with two topics., None, 3933), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 3934), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3936), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3937), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 3938), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3939), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 3940), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3941), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3942), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 7, 3943), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3945), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 3946), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 3947), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 3948), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 3949), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 3951), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3952), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 3953), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3954), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 3955), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 3958), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 3959), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 3960), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3961), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 3982), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 3983), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4004), Instruction(0xff, SELFDESTRUCT, 0, 1, 0, 5000, Halt execution and register account for later deletion., None, 4005), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 4006), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 4007), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4009), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4011), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4012), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4013), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4015), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 4016), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4018), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 4020), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4021), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 4023), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4024), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4025), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4026), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4027), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4028), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 4029), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 4030), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4031), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4033), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4034), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4035), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4036), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 4037), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 4040), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4041), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 4042), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4043), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4064), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4065), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4086), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 4087), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4088), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4109), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 4110), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 4111), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 4112), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 4121, 4113), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 4116), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4117), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4119), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 4120), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 4121), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4122), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 4123), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4125), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 4127), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4128), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4149), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4150), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4171), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4172), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4173), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4174), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4176), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4177), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4178), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4179), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4180), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4182), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4183), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 4185), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4186), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4188), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4189), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4190), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4191), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 4192), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4193), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4194), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4195), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4196), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 4197), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4198), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4199), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 4200), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4202), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4204), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4205), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4206), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4207), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 4208), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4209), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4210), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4211), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4212), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 4213), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4214), Instruction(0x30, ADDRESS, 0, 0, 1, 2, Get address of currently executing account., None, 4215), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4216), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4237), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4238), Instruction(0x7f, PUSH, 32, 0, 1, 3, Place 32-byte (full word) item on stack., 100389287136786176327247604509743168900146139575972864366142685224231313322991, 4240), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 4273), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 4274), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 4276), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4277), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4278), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4279), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4280), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4281), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4283), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 4284), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4285), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4286), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 4287), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 4289), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4290), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 4291), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 4292), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4293), Instruction(0xa3, LOG, 0, 5, 0, 1500, Append log record with three topics., None, 4294), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4295), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4296), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4317), Instruction(0x30, ADDRESS, 0, 0, 1, 2, Get address of currently executing account., None, 4318), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4319), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4340), Instruction(0x7f, PUSH, 32, 0, 1, 3, Place 32-byte (full word) item on stack., 100389287136786176327247604509743168900146139575972864366142685224231313322991, 4341), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 4374), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 4375), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 4377), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4378), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4379), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4380), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4381), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4382), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4384), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 4385), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4386), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4387), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 4388), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 4390), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4391), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 4392), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 4393), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4394), Instruction(0xa3, LOG, 0, 5, 0, 1500, Append log record with three topics., None, 4395), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4396), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4397), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 4398), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 4399), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4400), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4402), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 4403), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4405), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 4407), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4408), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4429), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4430), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4451), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4452), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4453), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4454), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4456), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4457), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4458), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4459), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4460), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4462), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4463), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 4465), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4466), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 4467), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 4468), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 4469), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 4470), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 4479, 4471), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 4474), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4475), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4477), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 4478), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 4479), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 6, 4480), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4482), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 4484), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4485), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4506), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4507), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4528), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4529), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4530), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4531), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4533), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4534), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4535), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4536), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4537), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4539), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4540), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 4542), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4543), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 4545), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4546), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4567), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4568), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4589), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4590), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4591), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4592), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4594), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4595), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4596), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4597), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4598), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4600), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4601), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 4603), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4604), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4605), Instruction(0x11, GT, 0, 2, 1, 3, Greater-than comparision., None, 4606), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 4607), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 4608), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 4609), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 4618, 4610), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 4613), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4614), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4616), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 4617), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 4618), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4619), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 5, 4620), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4622), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 4624), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4625), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4646), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4647), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4668), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4669), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4670), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4671), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4673), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4674), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4675), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4676), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4677), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4679), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4680), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 4682), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4683), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4685), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4686), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4687), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 4688), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 4689), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4690), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4691), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4692), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4693), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 4694), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4695), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4696), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 6, 4697), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4699), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 4701), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4702), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4723), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4724), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4745), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4746), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4747), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4748), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4750), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4751), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4752), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4753), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4754), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4756), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4757), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 4759), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4760), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 4762), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4763), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4784), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4785), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4806), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4807), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4808), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4809), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4811), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4812), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4813), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4814), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4815), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4817), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4818), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 4820), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4821), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4823), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4824), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4825), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 4826), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 4827), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4828), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4829), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4830), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4831), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 4832), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4833), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4834), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 4835), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4837), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4839), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4840), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4841), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 4842), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 4843), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4844), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4845), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4846), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4847), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 4848), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4849), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4850), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4851), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4872), Instruction(0x7f, PUSH, 32, 0, 1, 3, Place 32-byte (full word) item on stack., 92312388597506580910220011357950614650372135269746937547546302273167149333669, 4873), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 4906), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 4907), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 4909), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4910), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 4911), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4912), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 4913), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 4914), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 4916), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 4917), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4918), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4919), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 4920), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 4922), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4923), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 4924), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 4925), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4926), Instruction(0xa2, LOG, 0, 4, 0, 1125, Append log record with two topics., None, 4927), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 4928), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4930), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4931), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 4932), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 4933), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4934), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 4935), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 4936), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 4937), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 8, 4938), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4940), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4941), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 4942), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 4943), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4944), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4946), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4947), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4948), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4949), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 4950), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 4953), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4954), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 4955), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4956), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 4977), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 4978), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 4979), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 4980), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 4981), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 4983), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4984), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 4985), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4986), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 4987), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 4990), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 4991), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 4992), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 4993), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5014), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5015), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5036), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2300, 5037), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 5040), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5041), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5042), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5043), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 5044), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5045), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5046), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5048), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5049), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5051), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5053), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5054), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5055), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5056), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5057), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 5058), Instruction(0x88, DUP, 0, 9, 10, 3, Duplicate 9th stack item., None, 5059), Instruction(0x88, DUP, 0, 9, 10, 3, Duplicate 9th stack item., None, 5060), Instruction(0xf1, CALL, 0, 7, 1, 700, Message-call into an account., None, 5061), Instruction(0x93, SWAP, 0, 5, 5, 3, Exchange 1st and 5th stack items., None, 5062), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5063), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5064), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5065), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5066), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5067), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5068), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5069), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5083, 5070), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5073), Instruction(0x3d, RETURNDATASIZE, 0, 0, 1, 2, Get size of output data from the previous call from the current environment., None, 5074), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5075), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5077), Instruction(0x3e, RETURNDATACOPY, 0, 3, 0, 3, Copy output data from the previous call to memory., None, 5078), Instruction(0x3d, RETURNDATASIZE, 0, 0, 1, 2, Get size of output data from the previous call from the current environment., None, 5079), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5080), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 5082), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5083), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5084), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5085), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5086), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5087), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 2, 5088), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5090), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5091), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 5092), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5094), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 5095), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5097), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5098), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 5099), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 5102), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5103), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5104), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 2, 5105), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5107), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 5108), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5109), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 5110), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5112), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5113), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5115), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5116), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 5117), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 5118), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5119), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5121), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5122), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5124), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5125), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5126), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5127), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5128), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5130), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5131), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 5132), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5133), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5134), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5135), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5136), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5137), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5138), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5140), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 5141), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5142), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5143), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 5144), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5146), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 5147), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5149), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5150), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 5151), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 5154), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5155), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5156), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 2, 5157), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5159), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 5160), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5161), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5162), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5237, 5163), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5166), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5167), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 5168), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 5170), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5194, 5171), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5174), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 5175), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5178), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5179), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5180), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 5181), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 5182), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5183), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5184), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5185), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5186), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5188), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5189), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5237, 5190), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5193), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5194), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 5195), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5196), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5197), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5198), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5199), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5201), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5202), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5204), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 5206), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5207), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5208), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5209), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5210), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5211), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5212), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5213), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 5214), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5216), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5217), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5218), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5220), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5221), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5222), Instruction(0x11, GT, 0, 2, 1, 3, Greater-than comparision., None, 5223), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5208, 5224), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5227), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 5228), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5229), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5230), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 5231), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5233), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 5234), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5235), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5236), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5237), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5238), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5239), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5240), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5241), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5242), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5243), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5244), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5245), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5246), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 8, 5248), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5250), Instruction(0x34, CALLVALUE, 0, 0, 1, 2, Get deposited value by the instruction/transaction responsible for this execution., None, 5251), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5252), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5253), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5254), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5260, 5255), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5258), Instruction(0xfe, INVALID, 0, 0, 0, 0, Designated invalid instruction., None, 5259), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5260), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 5261), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5262), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5263), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5307, 5264), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5267), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5269), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5270), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5271), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5272), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 5273), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 5276), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5277), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 5278), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5279), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5300), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 5301), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5302), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2251, 5303), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5306), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5307), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5308), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5309), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5310), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5321, 5311), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 5314), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5315), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5316), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2251, 5317), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5320), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5321), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5322), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5323), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5324), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5325), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 9, 5326), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5328), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5330), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5331), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5332), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5334), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5335), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5337), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 5339), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5340), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5342), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5343), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5344), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5345), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 5346), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 5349), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5350), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 5351), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 255, 5352), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5354), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5355), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5356), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5357), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5358), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5360), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 5361), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5362), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5363), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5373, 5364), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 5367), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 5368), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 3215, 5369), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5372), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5373), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5374), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5735, 5375), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5378), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5379), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5380), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5401), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 2404383921, 5402), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 5407), Instruction(0x86, DUP, 0, 7, 8, 3, Duplicate 7th stack item., None, 5408), Instruction(0x30, ADDRESS, 0, 0, 1, 2, Get address of currently executing account., None, 5409), Instruction(0x87, DUP, 0, 8, 9, 3, Duplicate 8th stack item., None, 5410), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5411), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5413), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 5414), Instruction(0x63, PUSH, 4, 0, 1, 3, Place 4-byte item on stack., 4294967295, 5415), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5420), Instruction(0x7c, PUSH, 29, 0, 1, 3, Place 29-byte item on stack., 26959946667150639794667015087019630673637144422540572481103610249216, 5421), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 5451), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5452), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5453), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 4, 5454), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5456), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5457), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 5458), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5459), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5480), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5481), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5502), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5503), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5504), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5505), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5507), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 5508), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5509), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5510), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5511), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5513), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5514), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5515), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5536), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5537), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5558), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5559), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5560), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5561), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5563), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5564), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5565), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5567), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 5568), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5569), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5570), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 5571), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5572), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5573), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5574), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5575), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5576), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5577), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5578), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5579), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5581), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5582), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5583), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5584), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5585), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5586), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5587), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5589), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5590), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5591), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5592), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5593), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5594), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5596), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5597), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5598), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 5599), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5600), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5623, 5601), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5604), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5605), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 5606), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5607), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5608), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5609), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 5610), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5611), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5612), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5613), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5615), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5616), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5617), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5618), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5596, 5619), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5622), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5623), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5624), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5625), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5626), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5627), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5628), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5629), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5630), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5631), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5632), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5633), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 31, 5634), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5636), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5637), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5638), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5668, 5639), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5642), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5643), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 5644), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5645), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5646), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5647), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 5648), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5650), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5651), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5653), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 5654), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 5657), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5658), Instruction(0x19, NOT, 0, 1, 1, 3, Bitwise NOT operation., None, 5659), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5660), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5661), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5662), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5663), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 5665), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5666), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5667), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5668), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5669), Instruction(0x95, SWAP, 0, 7, 7, 3, Exchange 1st and 7th stack items., None, 5670), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5671), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5672), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5673), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5674), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5675), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5676), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5677), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5679), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5681), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5682), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5683), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5684), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5685), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5686), Instruction(0x87, DUP, 0, 8, 9, 3, Duplicate 8th stack item., None, 5688), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5689), Instruction(0x3b, EXTCODESIZE, 0, 1, 1, 700, Get size of an account's code., None, 5690), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5691), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5692), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5693), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5702, 5694), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5697), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5698), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5700), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 5701), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5702), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5703), Instruction(0x5a, GAS, 0, 0, 1, 2, Get the amount of available gas, including the corresponding reduction the amount of available gas., None, 5704), Instruction(0xf1, CALL, 0, 7, 1, 700, Message-call into an account., None, 5705), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5706), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5707), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5708), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5722, 5709), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5712), Instruction(0x3d, RETURNDATASIZE, 0, 0, 1, 2, Get size of output data from the previous call from the current environment., None, 5713), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5714), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5716), Instruction(0x3e, RETURNDATACOPY, 0, 3, 0, 3, Copy output data from the previous call to memory., None, 5717), Instruction(0x3d, RETURNDATASIZE, 0, 0, 1, 2, Get size of output data from the previous call from the current environment., None, 5718), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5719), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 5721), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5722), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5723), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5724), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5725), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5726), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 1, 5727), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5729), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5730), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5736, 5731), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5734), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5735), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5736), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5737), Instruction(0x93, SWAP, 0, 5, 5, 3, Exchange 1st and 5th stack items., None, 5738), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 5739), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5740), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5741), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5742), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5743), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5744), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 6, 5745), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5747), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5749), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5750), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5751), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5753), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5754), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5756), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 5758), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 5759), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5761), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5762), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5763), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 5765), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5766), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5768), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 5770), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5771), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5773), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5774), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 5775), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5776), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5777), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5778), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5779), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5780), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5781), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 7, 5782), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5784), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5785), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 5786), Instruction(0x30, ADDRESS, 0, 0, 1, 2, Get address of currently executing account., None, 5787), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5788), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5809), Instruction(0x31, BALANCE, 0, 1, 1, 700, Get balance of the given account., None, 5810), Instruction(0x10, LT, 0, 2, 1, 3, Less-than comparision., None, 5811), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5812), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5813), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5814), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5823, 5815), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5818), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5819), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5821), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 5822), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5823), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5867, 5824), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 5827), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5828), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5830), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5831), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5832), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5833), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 5834), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 5837), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5838), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 5839), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5840), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5861), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5862), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2251, 5863), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5866), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5867), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 5868), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5869), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5890), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 2300, 5891), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 7, 5894), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5896), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5897), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 5898), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5899), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5900), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5901), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 5902), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5903), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5904), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5906), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5907), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 5909), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 5911), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5912), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 5913), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 5914), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 5915), Instruction(0x85, DUP, 0, 6, 7, 3, Duplicate 6th stack item., None, 5916), Instruction(0x88, DUP, 0, 9, 10, 3, Duplicate 9th stack item., None, 5917), Instruction(0x88, DUP, 0, 9, 10, 3, Duplicate 9th stack item., None, 5918), Instruction(0xf1, CALL, 0, 7, 1, 700, Message-call into an account., None, 5919), Instruction(0x93, SWAP, 0, 5, 5, 3, Exchange 1st and 5th stack items., None, 5920), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5921), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5922), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5923), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5924), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5925), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5926), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 5927), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 5941, 5928), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 5931), Instruction(0x3d, RETURNDATASIZE, 0, 0, 1, 2, Get size of output data from the previous call from the current environment., None, 5932), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5933), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5935), Instruction(0x3e, RETURNDATACOPY, 0, 3, 0, 3, Copy output data from the previous call to memory., None, 5936), Instruction(0x3d, RETURNDATASIZE, 0, 0, 1, 2, Get size of output data from the previous call from the current environment., None, 5937), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5938), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 5940), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5941), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5942), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 5943), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 5944), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 5945), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 5946), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 5948), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5949), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 5950), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5951), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 5952), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 5955), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 5956), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 5957), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5958), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 5979), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 5980), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6001), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 6002), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6003), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6024), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 6025), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6026), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6027), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 6036, 6028), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 6031), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 6032), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 6034), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 6035), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 6036), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 6037), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 9, 6038), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 6040), Instruction(0x84, DUP, 0, 5, 6, 3, Duplicate 5th stack item., None, 6042), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6043), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6064), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6065), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6086), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 6087), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 6088), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 6089), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 6091), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 6092), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 6093), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 6094), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 6095), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 6097), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 6098), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 6100), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 6101), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 6103), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 6106), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 6107), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 6108), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 6109), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 255, 6110), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 6112), Instruction(0x19, NOT, 0, 1, 1, 3, Bitwise NOT operation., None, 6113), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6114), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 6115), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 6116), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6117), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6118), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 6119), Instruction(0x17, OR, 0, 2, 1, 3, Bitwise OR operation., None, 6120), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 6121), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 6122), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 6123), Instruction(0x7f, PUSH, 32, 0, 1, 3, Place 32-byte (full word) item on stack., 32657201770267406270387051459252782163643370607803865882362308449687686480805, 6124), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 6157), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 6158), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 6159), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 6161), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 6162), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 6163), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6164), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6185), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6186), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6207), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 6208), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 6209), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 6210), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 6212), Instruction(0x82, DUP, 0, 3, 4, 3, Duplicate 3rd stack item., None, 6213), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6214), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6215), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6216), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6217), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 6218), Instruction(0x52, MSTORE, 0, 2, 0, 3, Save word to memory., None, 6219), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 32, 6220), Instruction(0x1, ADD, 0, 2, 1, 3, Addition operation., None, 6222), Instruction(0x92, SWAP, 0, 4, 4, 3, Exchange 1st and 4th stack items., None, 6223), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 6224), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 6225), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 6226), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 64, 6227), Instruction(0x51, MLOAD, 0, 1, 1, 3, Load word from memory., None, 6229), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 6230), Instruction(0x91, SWAP, 0, 3, 3, 3, Exchange 1st and 3rd stack items., None, 6231), Instruction(0x3, SUB, 0, 2, 1, 3, Subtraction operation., None, 6232), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 6233), Instruction(0xa1, LOG, 0, 3, 0, 750, Append log record with one topic., None, 6234), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 6235), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 6236), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 6237), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 6238), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 6239), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 6241), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 6242), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 6243), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 6244), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 6245), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 6248), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 6249), Instruction(0x4, DIV, 0, 2, 1, 5, Integer division operation., None, 6250), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6251), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6272), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6273), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6294), Instruction(0x33, CALLER, 0, 0, 1, 2, Get caller address., None, 6295), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6296), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6317), Instruction(0x14, EQ, 0, 2, 1, 3, Equality comparision., None, 6318), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6319), Instruction(0x15, ISZERO, 0, 1, 1, 3, Simple not operator., None, 6320), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 6329, 6321), Instruction(0x57, JUMPI, 0, 2, 0, 10, Conditionally alter the program counter., None, 6324), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 6325), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 6327), Instruction(0xfd, REVERT, 0, 2, 0, 0, Stop execution and revert state changes, without consuming all provided gas and providing a reason., None, 6328), Instruction(0x5b, JUMPDEST, 0, 0, 0, 1, Mark a valid destination for jumps., None, 6329), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 6330), Instruction(0x60, PUSH, 1, 0, 1, 3, Place 1 byte item on stack., 0, 6331), Instruction(0x80, DUP, 0, 1, 2, 3, Duplicate 1st stack item., None, 6333), Instruction(0x61, PUSH, 2, 0, 1, 3, Place 2-byte item on stack., 256, 6334), Instruction(0xa, EXP, 0, 2, 1, 10, Exponential operation., None, 6337), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 6338), Instruction(0x54, SLOAD, 0, 1, 1, 800, Load word from storage., None, 6339), Instruction(0x81, DUP, 0, 2, 3, 3, Duplicate 2nd stack item., None, 6340), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6341), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 6362), Instruction(0x19, NOT, 0, 1, 1, 3, Bitwise NOT operation., None, 6363), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6364), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 6365), Instruction(0x83, DUP, 0, 4, 5, 3, Duplicate 4th stack item., None, 6366), Instruction(0x73, PUSH, 20, 0, 1, 3, Place 20-byte item on stack., 1461501637330902918203684832716283019655932542975, 6367), Instruction(0x16, AND, 0, 2, 1, 3, Bitwise AND operation., None, 6388), Instruction(0x2, MUL, 0, 2, 1, 5, Multiplication operation., None, 6389), Instruction(0x17, OR, 0, 2, 1, 3, Bitwise OR operation., None, 6390), Instruction(0x90, SWAP, 0, 2, 2, 3, Exchange 1st and 2nd stack items., None, 6391), Instruction(0x55, SSTORE, 0, 2, 0, 0, Save word to storage., None, 6392), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 6393), Instruction(0x50, POP, 0, 1, 0, 2, Remove item from stack., None, 6394), Instruction(0x56, JUMP, 0, 1, 0, 8, Alter the program counter., None, 6395), Instruction(0x0, STOP, 0, 0, 0, 0, Halts execution., None, 6396), Instruction(0xa1, LOG, 0, 3, 0, 750, Append log record with one topic., None, 6397), Instruction(0x65, PUSH, 6, 0, 1, 3, Place 6-byte item on stack., 108278179835992, 6398), Instruction(0x20, SHA3, 0, 2, 1, 30, Compute Keccak-256 hash., None, 6405), Instruction(0xdc, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6406), Instruction(0x6, MOD, 0, 2, 1, 5, Modulo remainder operation., None, 6407), Instruction(0x48, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6408), Instruction(0xa5, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6409), Instruction(0x36, CALLDATASIZE, 0, 0, 1, 2, Get size of input data in current environment., None, 6410), Instruction(0x1f, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6411), Instruction(0xcb, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6412), Instruction(0xfc, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6413), Instruction(0x12, SLT, 0, 2, 1, 3, Signed less-than comparision., None, 6414), Instruction(0xdd, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6415), Instruction(0x24, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6416), Instruction(0x1a, BYTE, 0, 2, 1, 3, Retrieve single byte from word., None, 6417), Instruction(0x29, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6418), Instruction(0xac, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6419), Instruction(0xf6, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6420), Instruction(0xd, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6421), Instruction(0x1e, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6422), Instruction(0xcd, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6423), Instruction(0xf6, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6424), Instruction(0xcb, INVALID, 0, 0, 0, 0, Unspecified invalid instruction., None, 6425)]
PUSH1 0x80
PUSH1 0x40
MSTORE
PUSH1 0x4
CALLDATASIZE
LT
PUSH2 0x13e
JUMPI
PUSH1 0x0
CALLDATALOAD
PUSH29 0x100000000000000000000000000000000000000000000000000000000
SWAP1
DIV
PUSH4 0xffffffff
AND
DUP1
PUSH4 0x5fefda7
EQ
PUSH2 0x176
JUMPI
DUP1
PUSH4 0x6fdde03
EQ
PUSH2 0x1ad
JUMPI
DUP1
PUSH4 0x95ea7b3
EQ
PUSH2 0x23d
JUMPI
DUP1
PUSH4 0x18160ddd
EQ
PUSH2 0x2a2
JUMPI
DUP1
PUSH4 0x23b872dd
EQ
PUSH2 0x2cd
JUMPI
DUP1
PUSH4 0x313ce567
EQ
PUSH2 0x352
JUMPI
DUP1
PUSH4 0x42966c68
EQ
PUSH2 0x383
JUMPI
DUP1
PUSH4 0x4b750334
EQ
PUSH2 0x3c8
JUMPI
DUP1
PUSH4 0x4ed0efd1
EQ
PUSH2 0x3f3
JUMPI
DUP1
PUSH4 0x70a08231
EQ
PUSH2 0x3fd
JUMPI
DUP1
PUSH4 0x79c65068
EQ
PUSH2 0x454
JUMPI
DUP1
PUSH4 0x79cc6790
EQ
PUSH2 0x4a1
JUMPI
DUP1
PUSH4 0x8620410b
EQ
PUSH2 0x506
JUMPI
DUP1
PUSH4 0x8da5cb5b
EQ
PUSH2 0x531
JUMPI
DUP1
PUSH4 0x8e3073a6
EQ
PUSH2 0x588
JUMPI
DUP1
PUSH4 0x95d89b41
EQ
PUSH2 0x5a8
JUMPI
DUP1
PUSH4 0xa6f2ae3a
EQ
PUSH2 0x638
JUMPI
DUP1
PUSH4 0xa9059cbb
EQ
PUSH2 0x642
JUMPI
DUP1
PUSH4 0xb414d4b6
EQ
PUSH2 0x68f
JUMPI
DUP1
PUSH4 0xcae9ca51
EQ
PUSH2 0x6ea
JUMPI
DUP1
PUSH4 0xdd62ed3e
EQ
PUSH2 0x795
JUMPI
DUP1
PUSH4 0xe4849b32
EQ
PUSH2 0x80c
JUMPI
DUP1
PUSH4 0xe724529c
EQ
PUSH2 0x839
JUMPI
DUP1
PUSH4 0xf2fde38b
EQ
PUSH2 0x888
JUMPI
JUMPDEST
PUSH1 0x0
PUSH1 0x8
SLOAD
CALLVALUE
MUL
SWAP1
POP
PUSH2 0x173
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
CALLER
DUP4
PUSH2 0x8cb
JUMP
JUMPDEST
POP
STOP
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x182
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x1ab
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0xb84
JUMP
JUMPDEST
STOP
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x1b9
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x1c2
PUSH2 0xbf1
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP1
PUSH1 0x20
ADD
DUP3
DUP2
SUB
DUP3
MSTORE
DUP4
DUP2
DUP2
MLOAD
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
DUP1
MLOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
DUP1
DUP4
DUP4
PUSH1 0x0
JUMPDEST
DUP4
DUP2
LT
ISZERO
PUSH2 0x202
JUMPI
DUP1
DUP3
ADD
MLOAD
DUP2
DUP5
ADD
MSTORE
PUSH1 0x20
DUP2
ADD
SWAP1
POP
PUSH2 0x1e7
JUMP
JUMPDEST
POP
POP
POP
POP
SWAP1
POP
SWAP1
DUP2
ADD
SWAP1
PUSH1 0x1f
AND
DUP1
ISZERO
PUSH2 0x22f
JUMPI
DUP1
DUP3
SUB
DUP1
MLOAD
PUSH1 0x1
DUP4
PUSH1 0x20
SUB
PUSH2 0x100
EXP
SUB
NOT
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
JUMPDEST
POP
SWAP3
POP
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x249
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x288
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0xc8f
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
ISZERO
ISZERO
ISZERO
ISZERO
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x2ae
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x2b7
PUSH2 0xd1c
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x2d9
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x338
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0xd22
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
ISZERO
ISZERO
ISZERO
ISZERO
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x35e
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x367
PUSH2 0xe4f
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
PUSH1 0xff
AND
PUSH1 0xff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x38f
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x3ae
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0xe62
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
ISZERO
ISZERO
ISZERO
ISZERO
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x3d4
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x3dd
PUSH2 0xf66
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
PUSH2 0x3fb
PUSH2 0xf6c
JUMP
JUMPDEST
STOP
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x409
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x43e
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0xfa6
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x460
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x49f
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0xfbe
JUMP
JUMPDEST
STOP
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x4ad
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x4ec
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0x112f
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
ISZERO
ISZERO
ISZERO
ISZERO
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x512
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x51b
PUSH2 0x1349
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x53d
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x546
PUSH2 0x134f
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
PUSH2 0x5a6
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0x1374
JUMP
JUMPDEST
STOP
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x5b4
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x5bd
PUSH2 0x13df
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP1
PUSH1 0x20
ADD
DUP3
DUP2
SUB
DUP3
MSTORE
DUP4
DUP2
DUP2
MLOAD
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
DUP1
MLOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
DUP1
DUP4
DUP4
PUSH1 0x0
JUMPDEST
DUP4
DUP2
LT
ISZERO
PUSH2 0x5fd
JUMPI
DUP1
DUP3
ADD
MLOAD
DUP2
DUP5
ADD
MSTORE
PUSH1 0x20
DUP2
ADD
SWAP1
POP
PUSH2 0x5e2
JUMP
JUMPDEST
POP
POP
POP
POP
SWAP1
POP
SWAP1
DUP2
ADD
SWAP1
PUSH1 0x1f
AND
DUP1
ISZERO
PUSH2 0x62a
JUMPI
DUP1
DUP3
SUB
DUP1
MLOAD
PUSH1 0x1
DUP4
PUSH1 0x20
SUB
PUSH2 0x100
EXP
SUB
NOT
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
JUMPDEST
POP
SWAP3
POP
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
PUSH2 0x640
PUSH2 0x147d
JUMP
JUMPDEST
STOP
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x64e
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x68d
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0x14be
JUMP
JUMPDEST
STOP
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x69b
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x6d0
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0x14cd
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
ISZERO
ISZERO
ISZERO
ISZERO
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x6f6
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x77b
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
DUP3
ADD
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
DUP1
DUP1
PUSH1 0x1f
ADD
PUSH1 0x20
DUP1
SWAP2
DIV
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP4
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP4
DUP4
DUP1
DUP3
DUP5
CALLDATACOPY
DUP3
ADD
SWAP2
POP
POP
POP
POP
POP
POP
SWAP2
SWAP3
SWAP2
SWAP3
SWAP1
POP
POP
POP
PUSH2 0x14ed
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
ISZERO
ISZERO
ISZERO
ISZERO
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x7a1
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x7f6
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0x1670
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x818
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x837
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0x1695
JUMP
JUMPDEST
STOP
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x845
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x886
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
DUP1
CALLDATALOAD
ISZERO
ISZERO
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0x1739
JUMP
JUMPDEST
STOP
JUMPDEST
CALLVALUE
DUP1
ISZERO
PUSH2 0x894
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
PUSH2 0x8c9
PUSH1 0x4
DUP1
CALLDATASIZE
SUB
DUP2
ADD
SWAP1
DUP1
DUP1
CALLDATALOAD
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SWAP1
PUSH1 0x20
ADD
SWAP1
SWAP3
SWAP2
SWAP1
POP
POP
POP
PUSH2 0x185e
JUMP
JUMPDEST
STOP
JUMPDEST
PUSH1 0x0
DUP3
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
EQ
ISZERO
ISZERO
ISZERO
PUSH2 0x8f1
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
DUP1
PUSH1 0x5
PUSH1 0x0
DUP6
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
SLOAD
LT
ISZERO
ISZERO
ISZERO
PUSH2 0x93f
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
PUSH1 0x5
PUSH1 0x0
DUP4
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
SLOAD
DUP2
PUSH1 0x5
PUSH1 0x0
DUP6
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
SLOAD
ADD
LT
ISZERO
ISZERO
ISZERO
PUSH2 0x9ce
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
PUSH1 0x9
PUSH1 0x0
DUP5
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH1 0xff
AND
ISZERO
ISZERO
ISZERO
PUSH2 0xa27
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
PUSH1 0x9
PUSH1 0x0
DUP4
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH1 0xff
AND
ISZERO
ISZERO
ISZERO
PUSH2 0xa80
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
DUP1
PUSH1 0x5
PUSH1 0x0
DUP6
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
DUP3
DUP3
SLOAD
SUB
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
DUP1
PUSH1 0x5
PUSH1 0x0
DUP5
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
DUP3
DUP3
SLOAD
ADD
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
DUP2
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP4
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
DUP4
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
LOG3
POP
POP
POP
JUMP
JUMPDEST
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
EQ
ISZERO
ISZERO
PUSH2 0xbdf
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
DUP2
PUSH1 0x7
DUP2
SWAP1
SSTORE
POP
DUP1
PUSH1 0x8
DUP2
SWAP1
SSTORE
POP
POP
POP
JUMP
JUMPDEST
PUSH1 0x1
DUP1
SLOAD
PUSH1 0x1
DUP2
PUSH1 0x1
AND
ISZERO
PUSH2 0x100
MUL
SUB
AND
PUSH1 0x2
SWAP1
DIV
DUP1
PUSH1 0x1f
ADD
PUSH1 0x20
DUP1
SWAP2
DIV
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
DUP1
SLOAD
PUSH1 0x1
DUP2
PUSH1 0x1
AND
ISZERO
PUSH2 0x100
MUL
SUB
AND
PUSH1 0x2
SWAP1
DIV
DUP1
ISZERO
PUSH2 0xc87
JUMPI
DUP1
PUSH1 0x1f
LT
PUSH2 0xc5c
JUMPI
PUSH2 0x100
DUP1
DUP4
SLOAD
DIV
MUL
DUP4
MSTORE
SWAP2
PUSH1 0x20
ADD
SWAP2
PUSH2 0xc87
JUMP
JUMPDEST
DUP3
ADD
SWAP2
SWAP1
PUSH1 0x0
MSTORE
PUSH1 0x20
PUSH1 0x0
SHA3
SWAP1
JUMPDEST
DUP2
SLOAD
DUP2
MSTORE
SWAP1
PUSH1 0x1
ADD
SWAP1
PUSH1 0x20
ADD
DUP1
DUP4
GT
PUSH2 0xc6a
JUMPI
DUP3
SWAP1
SUB
PUSH1 0x1f
AND
DUP3
ADD
SWAP2
JUMPDEST
POP
POP
POP
POP
POP
DUP2
JUMP
JUMPDEST
PUSH1 0x0
DUP2
PUSH1 0x6
PUSH1 0x0
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
DUP6
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
DUP2
SWAP1
SSTORE
POP
PUSH1 0x1
SWAP1
POP
SWAP3
SWAP2
POP
POP
JUMP
JUMPDEST
PUSH1 0x4
SLOAD
DUP2
JUMP
JUMPDEST
PUSH1 0x0
PUSH1 0x6
PUSH1 0x0
DUP6
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
SLOAD
DUP3
GT
ISZERO
ISZERO
ISZERO
PUSH2 0xdaf
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
DUP2
PUSH1 0x6
PUSH1 0x0
DUP7
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
DUP3
DUP3
SLOAD
SUB
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
PUSH2 0xe44
DUP5
DUP5
DUP5
PUSH2 0x8cb
JUMP
JUMPDEST
PUSH1 0x1
SWAP1
POP
SWAP4
SWAP3
POP
POP
POP
JUMP
JUMPDEST
PUSH1 0x3
PUSH1 0x0
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH1 0xff
AND
DUP2
JUMP
JUMPDEST
PUSH1 0x0
DUP2
PUSH1 0x5
PUSH1 0x0
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
SLOAD
LT
ISZERO
ISZERO
ISZERO
PUSH2 0xeb2
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
DUP2
PUSH1 0x5
PUSH1 0x0
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
DUP3
DUP3
SLOAD
SUB
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
DUP2
PUSH1 0x4
PUSH1 0x0
DUP3
DUP3
SLOAD
SUB
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH32 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5
DUP4
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
LOG2
PUSH1 0x1
SWAP1
POP
SWAP2
SWAP1
POP
JUMP
JUMPDEST
PUSH1 0x7
SLOAD
DUP2
JUMP
JUMPDEST
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
SELFDESTRUCT
JUMPDEST
PUSH1 0x5
PUSH1 0x20
MSTORE
DUP1
PUSH1 0x0
MSTORE
PUSH1 0x40
PUSH1 0x0
SHA3
PUSH1 0x0
SWAP2
POP
SWAP1
POP
SLOAD
DUP2
JUMP
JUMPDEST
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
EQ
ISZERO
ISZERO
PUSH2 0x1019
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
DUP1
PUSH1 0x5
PUSH1 0x0
DUP5
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
DUP3
DUP3
SLOAD
ADD
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
DUP1
PUSH1 0x4
PUSH1 0x0
DUP3
DUP3
SLOAD
ADD
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
ADDRESS
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH1 0x0
PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
DUP4
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
LOG3
DUP2
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
ADDRESS
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
DUP4
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
LOG3
POP
POP
JUMP
JUMPDEST
PUSH1 0x0
DUP2
PUSH1 0x5
PUSH1 0x0
DUP6
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
SLOAD
LT
ISZERO
ISZERO
ISZERO
PUSH2 0x117f
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
PUSH1 0x6
PUSH1 0x0
DUP5
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
SLOAD
DUP3
GT
ISZERO
ISZERO
ISZERO
PUSH2 0x120a
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
DUP2
PUSH1 0x5
PUSH1 0x0
DUP6
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
DUP3
DUP3
SLOAD
SUB
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
DUP2
PUSH1 0x6
PUSH1 0x0
DUP6
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
DUP3
DUP3
SLOAD
SUB
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
DUP2
PUSH1 0x4
PUSH1 0x0
DUP3
DUP3
SLOAD
SUB
SWAP3
POP
POP
DUP2
SWAP1
SSTORE
POP
DUP3
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH32 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5
DUP4
PUSH1 0x40
MLOAD
DUP1
DUP3
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
LOG2
PUSH1 0x1
SWAP1
POP
SWAP3
SWAP2
POP
POP
JUMP
JUMPDEST
PUSH1 0x8
SLOAD
DUP2
JUMP
JUMPDEST
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
JUMP
JUMPDEST
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH2 0x8fc
DUP3
SWAP1
DUP2
ISZERO
MUL
SWAP1
PUSH1 0x40
MLOAD
PUSH1 0x0
PUSH1 0x40
MLOAD
DUP1
DUP4
SUB
DUP2
DUP6
DUP9
DUP9
CALL
SWAP4
POP
POP
POP
POP
ISZERO
DUP1
ISZERO
PUSH2 0x13db
JUMPI
RETURNDATASIZE
PUSH1 0x0
DUP1
RETURNDATACOPY
RETURNDATASIZE
PUSH1 0x0
REVERT
JUMPDEST
POP
POP
JUMP
JUMPDEST
PUSH1 0x2
DUP1
SLOAD
PUSH1 0x1
DUP2
PUSH1 0x1
AND
ISZERO
PUSH2 0x100
MUL
SUB
AND
PUSH1 0x2
SWAP1
DIV
DUP1
PUSH1 0x1f
ADD
PUSH1 0x20
DUP1
SWAP2
DIV
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
DUP1
SLOAD
PUSH1 0x1
DUP2
PUSH1 0x1
AND
ISZERO
PUSH2 0x100
MUL
SUB
AND
PUSH1 0x2
SWAP1
DIV
DUP1
ISZERO
PUSH2 0x1475
JUMPI
DUP1
PUSH1 0x1f
LT
PUSH2 0x144a
JUMPI
PUSH2 0x100
DUP1
DUP4
SLOAD
DIV
MUL
DUP4
MSTORE
SWAP2
PUSH1 0x20
ADD
SWAP2
PUSH2 0x1475
JUMP
JUMPDEST
DUP3
ADD
SWAP2
SWAP1
PUSH1 0x0
MSTORE
PUSH1 0x20
PUSH1 0x0
SHA3
SWAP1
JUMPDEST
DUP2
SLOAD
DUP2
MSTORE
SWAP1
PUSH1 0x1
ADD
SWAP1
PUSH1 0x20
ADD
DUP1
DUP4
GT
PUSH2 0x1458
JUMPI
DUP3
SWAP1
SUB
PUSH1 0x1f
AND
DUP3
ADD
SWAP2
JUMPDEST
POP
POP
POP
POP
POP
DUP2
JUMP
JUMPDEST
PUSH1 0x0
PUSH1 0x8
SLOAD
CALLVALUE
DUP2
ISZERO
ISZERO
PUSH2 0x148c
JUMPI
INVALID
JUMPDEST
DIV
SWAP1
POP
PUSH2 0x14bb
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
CALLER
DUP4
PUSH2 0x8cb
JUMP
JUMPDEST
POP
JUMP
JUMPDEST
PUSH2 0x14c9
CALLER
DUP4
DUP4
PUSH2 0x8cb
JUMP
JUMPDEST
POP
POP
JUMP
JUMPDEST
PUSH1 0x9
PUSH1 0x20
MSTORE
DUP1
PUSH1 0x0
MSTORE
PUSH1 0x40
PUSH1 0x0
SHA3
PUSH1 0x0
SWAP2
POP
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH1 0xff
AND
DUP2
JUMP
JUMPDEST
PUSH1 0x0
DUP1
DUP5
SWAP1
POP
PUSH2 0x14fd
DUP6
DUP6
PUSH2 0xc8f
JUMP
JUMPDEST
ISZERO
PUSH2 0x1667
JUMPI
DUP1
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH4 0x8f4ffcb1
CALLER
DUP7
ADDRESS
DUP8
PUSH1 0x40
MLOAD
DUP6
PUSH4 0xffffffff
AND
PUSH29 0x100000000000000000000000000000000000000000000000000000000
MUL
DUP2
MSTORE
PUSH1 0x4
ADD
DUP1
DUP6
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
DUP5
DUP2
MSTORE
PUSH1 0x20
ADD
DUP4
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
DUP1
PUSH1 0x20
ADD
DUP3
DUP2
SUB
DUP3
MSTORE
DUP4
DUP2
DUP2
MLOAD
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
DUP1
MLOAD
SWAP1
PUSH1 0x20
ADD
SWAP1
DUP1
DUP4
DUP4
PUSH1 0x0
JUMPDEST
DUP4
DUP2
LT
ISZERO
PUSH2 0x15f7
JUMPI
DUP1
DUP3
ADD
MLOAD
DUP2
DUP5
ADD
MSTORE
PUSH1 0x20
DUP2
ADD
SWAP1
POP
PUSH2 0x15dc
JUMP
JUMPDEST
POP
POP
POP
POP
SWAP1
POP
SWAP1
DUP2
ADD
SWAP1
PUSH1 0x1f
AND
DUP1
ISZERO
PUSH2 0x1624
JUMPI
DUP1
DUP3
SUB
DUP1
MLOAD
PUSH1 0x1
DUP4
PUSH1 0x20
SUB
PUSH2 0x100
EXP
SUB
NOT
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP2
POP
JUMPDEST
POP
SWAP6
POP
POP
POP
POP
POP
POP
PUSH1 0x0
PUSH1 0x40
MLOAD
DUP1
DUP4
SUB
DUP2
PUSH1 0x0
DUP8
DUP1
EXTCODESIZE
ISZERO
DUP1
ISZERO
PUSH2 0x1646
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
POP
GAS
CALL
ISZERO
DUP1
ISZERO
PUSH2 0x165a
JUMPI
RETURNDATASIZE
PUSH1 0x0
DUP1
RETURNDATACOPY
RETURNDATASIZE
PUSH1 0x0
REVERT
JUMPDEST
POP
POP
POP
POP
PUSH1 0x1
SWAP2
POP
PUSH2 0x1668
JUMP
JUMPDEST
JUMPDEST
POP
SWAP4
SWAP3
POP
POP
POP
JUMP
JUMPDEST
PUSH1 0x6
PUSH1 0x20
MSTORE
DUP2
PUSH1 0x0
MSTORE
PUSH1 0x40
PUSH1 0x0
SHA3
PUSH1 0x20
MSTORE
DUP1
PUSH1 0x0
MSTORE
PUSH1 0x40
PUSH1 0x0
SHA3
PUSH1 0x0
SWAP2
POP
SWAP2
POP
POP
SLOAD
DUP2
JUMP
JUMPDEST
PUSH1 0x7
SLOAD
DUP2
MUL
ADDRESS
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
BALANCE
LT
ISZERO
ISZERO
ISZERO
PUSH2 0x16bf
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
PUSH2 0x16eb
CALLER
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP4
PUSH2 0x8cb
JUMP
JUMPDEST
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH2 0x8fc
PUSH1 0x7
SLOAD
DUP4
MUL
SWAP1
DUP2
ISZERO
MUL
SWAP1
PUSH1 0x40
MLOAD
PUSH1 0x0
PUSH1 0x40
MLOAD
DUP1
DUP4
SUB
DUP2
DUP6
DUP9
DUP9
CALL
SWAP4
POP
POP
POP
POP
ISZERO
DUP1
ISZERO
PUSH2 0x1735
JUMPI
RETURNDATASIZE
PUSH1 0x0
DUP1
RETURNDATACOPY
RETURNDATASIZE
PUSH1 0x0
REVERT
JUMPDEST
POP
POP
JUMP
JUMPDEST
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
EQ
ISZERO
ISZERO
PUSH2 0x1794
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
DUP1
PUSH1 0x9
PUSH1 0x0
DUP5
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x0
SHA3
PUSH1 0x0
PUSH2 0x100
EXP
DUP2
SLOAD
DUP2
PUSH1 0xff
MUL
NOT
AND
SWAP1
DUP4
ISZERO
ISZERO
MUL
OR
SWAP1
SSTORE
POP
PUSH32 0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5
DUP3
DUP3
PUSH1 0x40
MLOAD
DUP1
DUP4
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
ISZERO
ISZERO
ISZERO
ISZERO
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP3
POP
POP
POP
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
LOG1
POP
POP
JUMP
JUMPDEST
PUSH1 0x0
DUP1
SWAP1
SLOAD
SWAP1
PUSH2 0x100
EXP
SWAP1
DIV
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
CALLER
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
EQ
ISZERO
ISZERO
PUSH2 0x18b9
JUMPI
PUSH1 0x0
DUP1
REVERT
JUMPDEST
DUP1
PUSH1 0x0
DUP1
PUSH2 0x100
EXP
DUP2
SLOAD
DUP2
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
MUL
NOT
AND
SWAP1
DUP4
PUSH20 0xffffffffffffffffffffffffffffffffffffffff
AND
MUL
OR
SWAP1
SSTORE
POP
POP
JUMP
STOP
LOG1
PUSH6 0x627a7a723058
SHA3
INVALID
MOD
INVALID
INVALID
CALLDATASIZE
INVALID
INVALID
INVALID
SLT
INVALID
INVALID
BYTE
INVALID
INVALID
INVALID
INVALID
INVALID
INVALID
INVALID
INVALID
