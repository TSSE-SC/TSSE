pragma solidity ^0.4.24;

contract Test1{
    uint public goal = 1000;
    function setGoal() public returns(uint){
        goal = 5000;
        return goal;
    }
}

contract Test2{
    function test2(Test1 t1, uint b) public returns(uint){
        uint goal_ = t1.setGoal();
        if(goal_ == 5000){
            b += 100;
        }
        return b;
    }
}

contract RuleContract{
    uint private base_threshold = 50000;
    function getThreshold(uint currentTarget) 
            public returns(uint){
        require(currentTarget <= 5);
        if(currentTarget == 1){ 
            return base_threshold;
        }
        else{
            uint res = currentTarget*1000;
            return res;
        }
    }
}


// .code
//   PUSH 80			contract RuleContract{\r\n    ...
//   PUSH 40			contract RuleContract{\r\n    ...
//   MSTORE 			contract RuleContract{\r\n    ...
//   PUSH C350			50000
//   PUSH 0			uint private base_threshold = ...
//   SSTORE 			uint private base_threshold = ...
//   CALLVALUE 			contract RuleContract{\r\n    ...
//   DUP1 			olidity ^
//   ISZERO 			a 
//   PUSH [tag] 1			a 
//   JUMPI 			a 
//   PUSH 0			n
//   DUP1 			\n
//   REVERT 			.24;\r\n\r\ncont
// tag 1			a 
//   JUMPDEST 			a 
//   POP 			contract RuleContract{\r\n    ...
//   PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000			contract RuleContract{\r\n    ...
//   DUP1 			contract RuleContract{\r\n    ...
//   PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000			contract RuleContract{\r\n    ...
//   PUSH 0			contract RuleContract{\r\n    ...
//   CODECOPY 			contract RuleContract{\r\n    ...
//   PUSH 0			contract RuleContract{\r\n    ...
//   RETURN 			contract RuleContract{\r\n    ...
// .data
//   0:
//     .code
//       PUSH 80			contract RuleContract{\r\n    ...
//       PUSH 40			contract RuleContract{\r\n    ...
//       MSTORE 			contract RuleContract{\r\n    ...
//       PUSH 4			contract RuleContract{\r\n    ...
//       CALLDATASIZE 			contract RuleContract{\r\n    ...
//       LT 			contract RuleContract{\r\n    ...
//       PUSH [tag] 1			contract RuleContract{\r\n    ...
//       JUMPI 			contract RuleContract{\r\n    ...
//       PUSH 0			contract RuleContract{\r\n    ...
//       CALLDATALOAD 			contract RuleContract{\r\n    ...
//       PUSH 100000000000000000000000000000000000000000000000000000000			contract RuleContract{\r\n    ...
//       SWAP1 			contract RuleContract{\r\n    ...
//       DIV 			contract RuleContract{\r\n    ...
//       PUSH FFFFFFFF			contract RuleContract{\r\n    ...
//       AND 			contract RuleContract{\r\n    ...
//       DUP1 			contract RuleContract{\r\n    ...
//       PUSH 4615D5E9			contract RuleContract{\r\n    ...
//       EQ 			contract RuleContract{\r\n    ...
//       PUSH [tag] 2			contract RuleContract{\r\n    ...
//       JUMPI 			contract RuleContract{\r\n    ...
//     tag 1			contract RuleContract{\r\n    ...
//       JUMPDEST 			contract RuleContract{\r\n    ...
//       PUSH 0			contract RuleContract{\r\n    ...
//       DUP1 			contract RuleContract{\r\n    ...
//       REVERT 			contract RuleContract{\r\n    ...
//     tag 2			function getThreshold(uint cur...
//       JUMPDEST 			function getThreshold(uint cur...
//       CALLVALUE 			function getThreshold(uint cur...
//       DUP1 			olidity ^
//       ISZERO 			a 
//       PUSH [tag] 3			a 
//       JUMPI 			a 
//       PUSH 0			n
//       DUP1 			\n
//       REVERT 			.24;\r\n\r\ncont
//     tag 3			a 
//       JUMPDEST 			a 
//       POP 			function getThreshold(uint cur...
//       PUSH [tag] 4			function getThreshold(uint cur...
//       PUSH 4			function getThreshold(uint cur...
//       DUP1 			function getThreshold(uint cur...
//       CALLDATASIZE 			function getThreshold(uint cur...
//       SUB 			function getThreshold(uint cur...
//       DUP2 			function getThreshold(uint cur...
//       ADD 			function getThreshold(uint cur...
//       SWAP1 			function getThreshold(uint cur...
//       DUP1 			function getThreshold(uint cur...
//       DUP1 			function getThreshold(uint cur...
//       CALLDATALOAD 			function getThreshold(uint cur...
//       SWAP1 			function getThreshold(uint cur...
//       PUSH 20			function getThreshold(uint cur...
//       ADD 			function getThreshold(uint cur...
//       SWAP1 			function getThreshold(uint cur...
//       SWAP3 			function getThreshold(uint cur...
//       SWAP2 			function getThreshold(uint cur...
//       SWAP1 			function getThreshold(uint cur...
//       POP 			function getThreshold(uint cur...
//       POP 			function getThreshold(uint cur...
//       POP 			function getThreshold(uint cur...
//       PUSH [tag] 5			function getThreshold(uint cur...
//       JUMP 			function getThreshold(uint cur...
//     tag 4			function getThreshold(uint cur...
//       JUMPDEST 			function getThreshold(uint cur...
//       PUSH 40			function getThreshold(uint cur...
//       MLOAD 			function getThreshold(uint cur...
//       DUP1 			function getThreshold(uint cur...
//       DUP3 			function getThreshold(uint cur...
//       DUP2 			function getThreshold(uint cur...
//       MSTORE 			function getThreshold(uint cur...
//       PUSH 20			function getThreshold(uint cur...
//       ADD 			function getThreshold(uint cur...
//       SWAP2 			function getThreshold(uint cur...
//       POP 			function getThreshold(uint cur...
//       POP 			function getThreshold(uint cur...
//       PUSH 40			function getThreshold(uint cur...
//       MLOAD 			function getThreshold(uint cur...
//       DUP1 			function getThreshold(uint cur...
//       SWAP2 			function getThreshold(uint cur...
//       SUB 			function getThreshold(uint cur...
//       SWAP1 			function getThreshold(uint cur...
//       RETURN 			function getThreshold(uint cur...
//     tag 5			function getThreshold(uint cur...
//       JUMPDEST 			function getThreshold(uint cur...
//       PUSH 0			uint
//       DUP1 			uint res
//       PUSH 5			5
//       DUP4 			currentTarget
//       GT 			currentTarget <= 5
//       ISZERO 			currentTarget <= 5
//       ISZERO 			require(currentTarget <= 5)
//       ISZERO 			require(currentTarget <= 5)
//       PUSH [tag] 7			require(currentTarget <= 5)
//       JUMPI 			require(currentTarget <= 5)
//       PUSH 0			require(currentTarget <= 5)
//       DUP1 			require(currentTarget <= 5)
//       REVERT 			require(currentTarget <= 5)
//     tag 7			require(currentTarget <= 5)
//       JUMPDEST 			require(currentTarget <= 5)
//       PUSH 1			1
//       DUP4 			currentTarget
//       EQ 			currentTarget == 1
//       ISZERO 			if(currentTarget == 1){ \r\n  ...
//       PUSH [tag] 8			if(currentTarget == 1){ \r\n  ...
//       JUMPI 			if(currentTarget == 1){ \r\n  ...
//       PUSH 0			base_threshold
//       SLOAD 			base_threshold
//       SWAP2 			return base_threshold
//       POP 			return base_threshold
//       PUSH [tag] 6			return base_threshold
//       JUMP 			return base_threshold
//     tag 8			if(currentTarget == 1){ \r\n  ...
//       JUMPDEST 			if(currentTarget == 1){ \r\n  ...
//       PUSH 3E8			1000
//       DUP4 			currentTarget
//       MUL 			currentTarget*1000
//       SWAP1 			uint res = currentTarget*1000
//       POP 			uint res = currentTarget*1000
//       DUP1 			res
//       SWAP2 			return res
//       POP 			return res
//     tag 6			function getThreshold(uint cur...
//       JUMPDEST 			function getThreshold(uint cur...
//       POP 			function getThreshold(uint cur...
//       SWAP2 			function getThreshold(uint cur...
//       SWAP1 			function getThreshold(uint cur...
//       POP 			function getThreshold(uint cur...
//       JUMP [out]			function getThreshold(uint cur...
//     .data